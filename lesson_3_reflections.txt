When would you want to create a remote repository rather than keeping all your work local?
    Remote repositories facilitate collaboration with others and serve as a backed up
    source of the files.
    
Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    There may be changes represented in the remote repository that I do not
    want to introduce into my local repository without first confirming the
    nature of these changes.  Leaving these actions as manual steps affords
    the user a greater deal of control.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forking a repository essentially clones a repository from one GitHub account
    to another.  Cloning a repository creates a duplicate of the repository to
    another location (locally or remotely).  Creating a branch in a repository
    creates a label that faciliates a seperate development path of the code (which
    is isolated from changes in different branches of the code until such time that
    a merging takes place).

What is the benefit of having a copy of the last known state of the remote
stored locally?

    By having access to this copy, you are afforded knowledge that could affect the
    way in which you edit your locally based code.  If there are changes present in
    the remote repository (and as such, reflected in the local copy of this remote
    repository), you may be able to adjust accordingly when making changes to the local
    repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    If I couldn't use Git or GitHub, I suppose I would manually share files through email.
    In order to track changes to the file,  I would update the name of the file to reflect
    its version number.  Collaborating in this way would skip the certain steps that are
    necessary with the use of Git and GitHub (e.g., staging, committing, pull requests, etc).
    However, it would be much harder to effectively organize changes to the files made
    in parallel by more than one collaborator.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would want to make changes in a seperate branch when I am either not sure that the changes
    will be accepted by others (in a collaborative environment) or if the changes will prove
    to be beneficial/worthwhile.  Making changes directly in the master has the advantage of 
    speed and convenience, while making changes in a branch has the advantage of fostering
    collaboration and carefully pacing and testing changes in the code.
