What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, a hidden folder(.git) is created.  This folder contains meta-deta
	concerning the new repository that is created.  You need to initialize the repository in order to
	begin tracking changes in the files within the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area differs from the working directory and the repository in that it servers as an
	intermediate area in which changes to files are prepared, but not yet executed.  It offers value
	in the form of serving as a buffer zone that can be loaded with potential code changes, without
	requiring a user to finalize and execute these changes.

How can you use the staging area to make sure you have one commit per logical
change?
	The staging area can be used as a temporary space to store potential changes prior to committing
	the changes.  By allowing the user to organize and prepare changes in this way, the user can
	proceed with the final committal stage in a controlled and logical way.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches might be helpful when expermenting with changes to the existing code.  The branches help to keep these experimental changes seperate from the stable/working code in the existing commits.

How do the diagrams help you visualize the branch structure?
	The diagrams provide a clear, illustrated representation of the structure.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	When merging two branches together, a new commit is ostensibly created.  This new commit would contain
	the changes (and corresponding histories) of the two parents.  This might result in conflicts, however, which may need to be corrected manually before the merging can be completed.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Git's automatic mergins is convenient and fast.  However, the cons include the possibility that automatic merging will not be possible due to ambiguity in the changes between the files.  Thus, some manual correction may be needed even when automatic mergin is attempted.